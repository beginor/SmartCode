@using SmartCode
@using SmartCode.Generator.Entity
@using static SmartCode.Generator.RazorTemplates.Contributions.Common;
@model BuildContext
@{
    var project = Model.Project;
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
}
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Beginor.AppFx.Api;
using Beginor.AppFx.Core;
using @(project.Author).@(project.Module).Models;
using @(project.Author).@(project.Module).Data.Repositories;

namespace @(project.Author).@(project.Module).@(buildTask.Module).Controllers {

    /// <summary>@table.GetSummary() 服务接口</summary>
    [ApiController]
    [Route("api/@ToPath(table.Name)")]
    public class @(table.ConvertedName)Controller : Controller {

        log4net.ILog logger = log4net.LogManager.GetLogger(
            System.Reflection.MethodBase.GetCurrentMethod().DeclaringType
        );

        private I@(table.ConvertedName)Repository repo;

        public @(table.ConvertedName)Controller(I@(table.ConvertedName)Repository repo) {
            this.repo = repo;
        }

        protected override void Dispose(bool disposing) {
            if (disposing) {
                repo = null;
            }
            base.Dispose(disposing);
        }

        /// <summary> 创建 @(table.GetSummary()) </summary>
        /// <response code="200">创建 @(table.GetSummary()) 成功</response>
        /// <response code="500">服务器内部错误</response>
        [HttpPost("")]
        [Authorize("@(table.Name).create")]
        public async Task<ActionResult<@(table.ConvertedName)Model>> Create(
            [FromBody]@(table.ConvertedName)Model model
        ) {
            try {
                await repo.SaveAsync(model);
                return model;
            }
            catch (Exception ex) {
                logger.Error("Can not create @(table.Name).", ex);
                return this.InternalServerError(ex.GetOriginalMessage());
            }
        }

        /// <summary>删除 @(table.GetSummary()) </summary>
        /// <response code="204">删除 @(table.GetSummary()) 成功</response>
        /// <response code="500">服务器内部错误</response>
        [HttpDelete("{id:long}")]
        [ProducesResponseType(204)]
        [Authorize("@(table.Name).delete")]
        public async Task<ActionResult> Delete(long id) {
            try {
                await repo.DeleteAsync(id);
                return NoContent();
            }
            catch (Exception ex) {
                logger.Error("Can not delete @(table.Name).", ex);
                return this.InternalServerError(ex.GetOriginalMessage());
            }
        }

        /// <summary>搜索 @(table.GetSummary()) ， 分页返回结果</summary>
        /// <response code="200">成功, 分页返回结果</response>
        /// <response code="500">服务器内部错误</response>
        [HttpGet("")]
        [Authorize("@(table.Name).read")]
        public async Task<ActionResult<PaginatedResponseModel<@(table.ConvertedName)Model>>> GetAll(
            [FromQuery]@(table.ConvertedName)SearchModel model
        ) {
            try {
                var result = await repo.SearchAsync(model);
                return result;
            }
            catch (Exception ex) {
                logger.Error("Can not get all @(table.Name) .", ex);
                return this.InternalServerError(ex.GetOriginalMessage());
            }
        }

        /// <summary>
        /// 获取指定的 @(table.GetSummary())
        /// </summary>
        /// <response code="200">返回 @(table.GetSummary()) 信息</response>
        /// <response code="404"> @(table.GetSummary()) 不存在</response>
        /// <response code="500">服务器内部错误</response>
        [HttpGet("{id:long}")]
        [Authorize("@(table.Name).read")]
        public async Task<ActionResult<@(table.ConvertedName)Model>> GetById(long id) {
            try {
                var result = await repo.GetByIdAsync(id);
                if (result == null) {
                    return NotFound();
                }
                return result;
            }
            catch (Exception ex) {
                logger.Error($"Can not get @(table.Name) with {id}.", ex);
                return this.InternalServerError(ex.GetOriginalMessage());
            }
        }

        /// <summary>
        /// 更新 @(table.GetSummary())
        /// </summary>
        /// <response code="200">更新成功，返回 @(table.GetSummary()) 信息</response>
        /// <response code="404"> @(table.GetSummary()) 不存在</response>
        /// <response code="500">服务器内部错误</response>
        [HttpPut("{id:long}")]
        [Authorize("@(table.Name).update")]
        public async Task<ActionResult<@(table.ConvertedName)Model>> Update(
            [FromRoute]long id,
            [FromBody]@(table.ConvertedName)Model model
        ) {
            try {
                var modelInDb = await repo.GetByIdAsync(id);
                if (modelInDb == null) {
                    return NotFound();
                }
                await repo.UpdateAsync(id, model);
                return model;
            }
            catch (Exception ex) {
                logger.Error($"Can not update @(table.Name) with {id}.", ex);
                return this.InternalServerError(ex.GetOriginalMessage());
            }
        }

    }

}
